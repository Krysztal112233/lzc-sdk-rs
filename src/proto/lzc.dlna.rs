// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPositionInfoRequest {
    #[prost(string, tag = "1")]
    pub player_uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPositionInfoResponse {
    #[prost(string, tag = "1")]
    pub track: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub track_duration: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub track_metadata: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub track_uri: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub rel_time: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub abs_time: ::prost::alloc::string::String,
    #[prost(int32, tag = "7")]
    pub rel_count: i32,
    #[prost(int32, tag = "8")]
    pub abs_count: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoActionRequest {
    #[prost(string, tag = "1")]
    pub player_uuid: ::prost::alloc::string::String,
    #[prost(enumeration = "do_action_request::Action", tag = "2")]
    pub action: i32,
    #[prost(string, optional, tag = "3")]
    pub media_file: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub media_subtitle: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub seek_target: ::core::option::Option<::prost::alloc::string::String>,
}
/// Nested message and enum types in `DoActionRequest`.
pub mod do_action_request {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Action {
        Unknown = 0,
        /// 需要在mediaFile中设置对应的媒体路径，
        /// 支持<http://类型或/开头的本地资源路径(相当于当前用户目录>)
        Play = 1,
        Pause = 2,
        /// 若当前是paused状态，则恢复播放，否则不做任何处理，返回成功。
        Continue = 3,
        /// 停止对此instance上的任何操作，后续操作需要重新调用play开始
        Stop = 4,
        Seek = 5,
    }
    impl Action {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "Unknown",
                Self::Play => "Play",
                Self::Pause => "Pause",
                Self::Continue => "Continue",
                Self::Stop => "Stop",
                Self::Seek => "Seek",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "Unknown" => Some(Self::Unknown),
                "Play" => Some(Self::Play),
                "Pause" => Some(Self::Pause),
                "Continue" => Some(Self::Continue),
                "Stop" => Some(Self::Stop),
                "Seek" => Some(Self::Seek),
                _ => None,
            }
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RmpStatus {
    #[prost(enumeration = "rmp_status::Status", tag = "1")]
    pub status: i32,
}
/// Nested message and enum types in `RMPStatus`.
pub mod rmp_status {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Status {
        Unknown = 0,
        Playing = 1,
        Paused = 2,
        Stopped = 3,
    }
    impl Status {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "Unknown",
                Self::Playing => "Playing",
                Self::Paused => "Paused",
                Self::Stopped => "Stopped",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "Unknown" => Some(Self::Unknown),
                "Playing" => Some(Self::Playing),
                "Paused" => Some(Self::Paused),
                "Stopped" => Some(Self::Stopped),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanRmpResponse {
    #[prost(message, repeated, tag = "1")]
    pub remote_media_players: ::prost::alloc::vec::Vec<RemoteMediaPlayer>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    #[prost(string, tag = "1")]
    pub player_uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoteMediaPlayer {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub icon_data: ::prost::alloc::string::String,
    /// 所处局域网信息，若为空表示处于盒子的局域网，
    /// 否则为具体客户端peer id的局域网
    #[prost(string, tag = "4")]
    pub lan_region: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod remote_media_player_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// 目前支持搜索DLNA的Render设备，并投送媒体文件
    #[derive(Debug, Clone)]
    pub struct RemoteMediaPlayerServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RemoteMediaPlayerServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RemoteMediaPlayerServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RemoteMediaPlayerServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RemoteMediaPlayerServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn scan_rmp(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ScanRmpResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/lzc.dlna.RemoteMediaPlayerService/ScanRMP",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("lzc.dlna.RemoteMediaPlayerService", "ScanRMP"));
            self.inner.unary(req, path, codec).await
        }
        /// 立刻返回选择的当前RMP状态，并在状态变动时重新发送
        pub async fn subscribe(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::RmpStatus>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/lzc.dlna.RemoteMediaPlayerService/Subscribe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("lzc.dlna.RemoteMediaPlayerService", "Subscribe"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn do_action(
            &mut self,
            request: impl tonic::IntoRequest<super::DoActionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/lzc.dlna.RemoteMediaPlayerService/DoAction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("lzc.dlna.RemoteMediaPlayerService", "DoAction"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_position_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPositionInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPositionInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/lzc.dlna.RemoteMediaPlayerService/GetPositionInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "lzc.dlna.RemoteMediaPlayerService",
                        "GetPositionInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
